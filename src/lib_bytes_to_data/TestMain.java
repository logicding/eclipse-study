package com.example.lib;


import java.lang.reflect.Array;
import java.util.Arrays;

public class TestMain {

    private static int nOneFaceLength = 2208;
    private static int nOneHandLenght = 880;
    private static byte[] hexString2Bytes(String src) {
        int l = src.length() / 2;
        byte[] ret = new byte[l];
        for (int i = 0; i < l; i++) {
            ret[i] = (byte) Integer
                    .valueOf(src.substring(i * 2, i * 2 + 2), 16).byteValue();
        }
        return ret;
    }
    public static void showKonkaAIRaw(String strAIData)
    {
        System.out.println("showKonkaAIRaw");
        byte [] strTestbytes = hexString2Bytes(strAIData);
        System.err.println("length:" + strTestbytes.length);

        byte [] bytesFlag = ByteUtil.subBytes(strTestbytes, 0, 32);
        byte [] bytesFaceCount = ByteUtil.subBytes(strTestbytes, 32, 4);
        byte [] bytesHandCount = ByteUtil.subBytes(strTestbytes, 36, 4);
        byte [] bytesBrightness = ByteUtil.subBytes(strTestbytes, 40, 4);

        int nFaceCount = ByteUtil.getInt(bytesFaceCount);
        System.out.println("Flag:" + new String(bytesFlag));
        System.out.println("FaceCount:" + nFaceCount);
        System.out.println("HandCount:" + ByteUtil.getInt(bytesHandCount));
        System.out.println("Brightness:" + ByteUtil.getInt(bytesBrightness));

        FaceObject [] arryFaces = new FaceObject[nFaceCount];

        byte [] bytesFaceData = ByteUtil.subBytes(strTestbytes, 44, nFaceCount*nOneFaceLength);
        int i = 0;
        int nPointsIndex = 0;
        int nFeatureIndex = 0;
        int nIndex = 0;
        for (i=0; i<nFaceCount; ++i)
        {
            arryFaces[i] = new FaceObject();
            arryFaces[i].setFaceTrackId(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceRectLeft(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceRectTop(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceRectRight(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceRectButtom(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFacePointCount(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceFeatureLen(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceAttributeCount(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceYaw(ByteUtil.getInt(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFacePitch(ByteUtil.getFloat(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceRoll(ByteUtil.getFloat(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;
            arryFaces[i].setFaceQuality(ByteUtil.getFloat(ByteUtil.subBytes(bytesFaceData, i*nOneFaceLength+nIndex, 4)));
            nIndex += 4;

            int nFacePointCount = arryFaces[i].getFacePointCount();
            int nFaceFeatureLen = arryFaces[i].getFaceFeatureLen();
            int nFaceAttributeCount = arryFaces[i].getFaceAttributeCount();

            byte [] bytesFacePointData = ByteUtil.subBytes(bytesFaceData, nIndex, 8*nFacePointCount);
            arryFaces[i].arrFacePoint = new MyPoint[nFacePointCount];
            nIndex += 8*106;
            for (nPointsIndex=0; nPointsIndex<nFacePointCount; ++nPointsIndex)
            {
                MyPoint stPoint = new MyPoint();
                stPoint.x = (int)ByteUtil.getFloat(ByteUtil.subBytes(bytesFacePointData, 4*2*nPointsIndex, 4));
                stPoint.y = (int)ByteUtil.getFloat(ByteUtil.subBytes(bytesFacePointData, 4*(2*nPointsIndex+1), 4));
                arryFaces[i].arrFacePoint[nPointsIndex] = stPoint;
            }

            arryFaces[i].arrFaceFeature = ByteUtil.subBytes(bytesFaceData, nIndex, nFaceFeatureLen);
            nIndex += 512;

            byte [] bytesFaceAttributeData = ByteUtil.subBytes(bytesFaceData, nIndex, 40*nFaceAttributeCount);
            arryFaces[i].arrFaceAttribute = new FaceAttribute[nFaceAttributeCount];
            nIndex += 40*20;

            for (nFeatureIndex=0; nFeatureIndex<nFaceAttributeCount; ++nFeatureIndex)
            {
                FaceAttribute stFaceAttribute = new FaceAttribute();
                stFaceAttribute.setStrName(new String(ByteUtil.subBytes(bytesFaceAttributeData, 40*nFeatureIndex, 16)));
                stFaceAttribute.setStrLabel(new String(ByteUtil.subBytes(bytesFaceAttributeData, 40*nFeatureIndex+16, 16)));
                stFaceAttribute.setfLabel(ByteUtil.getFloat(ByteUtil.subBytes(bytesFaceAttributeData, 40*nFeatureIndex+32, 4)));
                stFaceAttribute.setScore(ByteUtil.getFloat(ByteUtil.subBytes(bytesFaceAttributeData, 40*nFeatureIndex+36, 4)));
                arryFaces[i].arrFaceAttribute[nFeatureIndex] = stFaceAttribute;
            }
            System.out.println(arryFaces[i].toString());
        }
    }
    public static void showChangHongAIRaw(String strAIData)
    {
        System.out.println("showChangHongAIRaw");
         byte [] strTestbytes = hexString2Bytes(strAIData);
        System.err.println("length:" + strTestbytes.length);

        byte [] bytesFlag = ByteUtil.subBytes(strTestbytes, 0, 32);
        byte [] bytesMsgID = ByteUtil.subBytes(strTestbytes, 32, 4);
        byte [] bytesByteStreamLen = ByteUtil.subBytes(strTestbytes, 36, 4);


        int nFeatureIndex = 0;
        int nFeatureStart = 40;
        int nByteStreamLen = ByteUtil.getInt(bytesByteStreamLen);
        int nMsgID = ByteUtil.getInt(bytesMsgID);
        System.out.println("Flag:" + new String(bytesFlag));
        System.out.println("MsgID:" + nMsgID);
        System.out.println("ByteStreamLen:" + nByteStreamLen);
        int nFeatureCount = 0;  // 算法数据个数
        CHFeatureObject[] arryFeatureObject = null;
        if (40 != nByteStreamLen)
        {
            byte [] bytesFeatureCount = ByteUtil.subBytes(strTestbytes, nFeatureStart, 4);
            nFeatureCount = ByteUtil.getInt(bytesFeatureCount);
            if (nFeatureCount>0)
            {
                int nFeatureReadIndex = 4;
                arryFeatureObject = new CHFeatureObject[nFeatureCount];
                for (nFeatureIndex = 0; nFeatureIndex < nFeatureCount; ++nFeatureIndex)
                {
                    CHFeatureObject stFeatureObject = new CHFeatureObject();
                    stFeatureObject.nType = ByteUtil.getInt(ByteUtil.subBytes(strTestbytes, nFeatureStart+nFeatureReadIndex, 4));
                    nFeatureReadIndex += 4;
                    stFeatureObject.nId = ByteUtil.getInt(ByteUtil.subBytes(strTestbytes, nFeatureStart+nFeatureReadIndex, 4));
                    nFeatureReadIndex += 4;
                    stFeatureObject.nBufLen = ByteUtil.getInt(ByteUtil.subBytes(strTestbytes, nFeatureStart+nFeatureReadIndex, 4));
                    nFeatureReadIndex += 4;
                    stFeatureObject.arryBuffer = ByteUtil.subBytes(strTestbytes, nFeatureStart+nFeatureReadIndex, stFeatureObject.nBufLen);
                    nFeatureReadIndex += stFeatureObject.nBufLen;
                    stFeatureObject.ChangFeatureData();
                    arryFeatureObject[nFeatureIndex] = stFeatureObject;
                }
            }
        }

        System.out.println("FeatureCount:" + nFeatureCount);
        System.out.println("Features:" + Arrays.toString(arryFeatureObject));
        byte [] bytesFaceJson = ByteUtil.subBytes(strTestbytes, nByteStreamLen, strTestbytes.length-nByteStreamLen);
        System.out.println("jsonData:" + ByteUtil.getString(bytesFaceJson));
    }
    public static void main(String[] args) {
        String strKonkaTestBuff
        String strChangHongTestBuff = "43485F43414D4552415F4155544F5F524553554C540000000000000000000000"+
                "0B000000"+
                "88030000"+
                "02000000" +
                "01000000" +
                "08000000" +

        showChangHongAIRaw(strChangHongTestBuff);
        //showKonkaAIRaw(strKonkaTestBuff);
    }
}